
Ejercicio_9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000852  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000797  00000000  00000000  00000a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000287  00000000  00000000  000011f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000147c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  000014a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000084  00000000  00000000  00001899  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000191d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	44 c0       	rjmp	.+136    	; 0x124 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:

int main(void) {
	// -------------------------------
	// CONFIGURACIÓN DE PUERTOS
	// -------------------------------
	DDRD &= ~(0x3F);    // PD0..PD5 como entradas
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	80 7c       	andi	r24, 0xC0	; 192
  a2:	8a b9       	out	0x0a, r24	; 10
	PORTD |= 0x3F;      // Pull-ups internos (botones activos en bajo)
  a4:	8b b1       	in	r24, 0x0b	; 11
  a6:	8f 63       	ori	r24, 0x3F	; 63
  a8:	8b b9       	out	0x0b, r24	; 11

	DDRA |= 0x0F;       // PA0..PA3 como salidas (eco)
  aa:	81 b1       	in	r24, 0x01	; 1
  ac:	8f 60       	ori	r24, 0x0F	; 15
  ae:	81 b9       	out	0x01, r24	; 1
	DDRB |= (1<<PB0) | (1<<PB1);   // PB0=OK (verde), PB1=FAIL (rojo)
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	83 60       	ori	r24, 0x03	; 3
  b4:	84 b9       	out	0x04, r24	; 4

	// Inicializar salidas
	PORTA &= ~(0x0F);
  b6:	82 b1       	in	r24, 0x02	; 2
  b8:	80 7f       	andi	r24, 0xF0	; 240
  ba:	82 b9       	out	0x02, r24	; 2
	PORTB &= ~((1<<PB0) | (1<<PB1));
  bc:	85 b1       	in	r24, 0x05	; 5
  be:	8c 7f       	andi	r24, 0xFC	; 252
  c0:	85 b9       	out	0x05, r24	; 5

	// Variables para detectar flanco
	int prevEnter = 1;   // estado previo de ENTER (reposo=1 por pull-up)
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	01 c0       	rjmp	.+2      	; 0xca <main+0x2c>
#define F_CPU 20000000UL
#include <avr/io.h>

#define PATRON 0b1010   // Patrón fijo de validación

int main(void) {
  c8:	9c 01       	movw	r18, r24

	while (1) {
		// -------------------------------
		// ECO en PA0..PA3
		// -------------------------------
		int nibble = PIND & 0x0F;
  ca:	89 b1       	in	r24, 0x09	; 9
  cc:	8f 70       	andi	r24, 0x0F	; 15
  ce:	68 2f       	mov	r22, r24
  d0:	70 e0       	ldi	r23, 0x00	; 0
		PORTA = (PORTA & 0xF0) | nibble;
  d2:	92 b1       	in	r25, 0x02	; 2
  d4:	90 7f       	andi	r25, 0xF0	; 240
  d6:	89 2b       	or	r24, r25
  d8:	82 b9       	out	0x02, r24	; 2

		// -------------------------------
		// CLR (PD5 activo en bajo)
		// -------------------------------
		if (!(PIND & (1<<PD5))) {
  da:	4d 99       	sbic	0x09, 5	; 9
  dc:	06 c0       	rjmp	.+12     	; 0xea <main+0x4c>
			PORTA &= ~(0x0F);
  de:	82 b1       	in	r24, 0x02	; 2
  e0:	80 7f       	andi	r24, 0xF0	; 240
  e2:	82 b9       	out	0x02, r24	; 2
			PORTB &= ~((1<<PB0) | (1<<PB1));
  e4:	85 b1       	in	r24, 0x05	; 5
  e6:	8c 7f       	andi	r24, 0xFC	; 252
  e8:	85 b9       	out	0x05, r24	; 5
		}

		// -------------------------------
		// ENTER (PD4 activo en bajo, flanco de bajada)
		// -------------------------------
		int enter = (PIND & (1<<PD4)) ? 1 : 0;  // leer PD4
  ea:	99 b1       	in	r25, 0x09	; 9
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	49 2f       	mov	r20, r25
  f0:	40 71       	andi	r20, 0x10	; 16
  f2:	94 ff       	sbrs	r25, 4
  f4:	80 e0       	ldi	r24, 0x00	; 0
  f6:	90 e0       	ldi	r25, 0x00	; 0
		if (prevEnter == 1 && enter == 0) {         // flanco 1→0
  f8:	21 30       	cpi	r18, 0x01	; 1
  fa:	31 05       	cpc	r19, r1
  fc:	29 f7       	brne	.-54     	; 0xc8 <main+0x2a>
  fe:	41 11       	cpse	r20, r1
 100:	e3 cf       	rjmp	.-58     	; 0xc8 <main+0x2a>
			if (nibble == PATRON) {
 102:	6a 30       	cpi	r22, 0x0A	; 10
 104:	71 05       	cpc	r23, r1
 106:	39 f4       	brne	.+14     	; 0x116 <main+0x78>
				PORTB |=  (1<<PB0);  // encender OK (verde)
 108:	25 b1       	in	r18, 0x05	; 5
 10a:	21 60       	ori	r18, 0x01	; 1
 10c:	25 b9       	out	0x05, r18	; 5
				PORTB &= ~(1<<PB1);  // apagar FAIL
 10e:	25 b1       	in	r18, 0x05	; 5
 110:	2d 7f       	andi	r18, 0xFD	; 253
 112:	25 b9       	out	0x05, r18	; 5
 114:	d9 cf       	rjmp	.-78     	; 0xc8 <main+0x2a>
				} else {
				PORTB |=  (1<<PB1);  // encender FAIL (rojo)
 116:	25 b1       	in	r18, 0x05	; 5
 118:	22 60       	ori	r18, 0x02	; 2
 11a:	25 b9       	out	0x05, r18	; 5
				PORTB &= ~(1<<PB0);  // apagar OK
 11c:	25 b1       	in	r18, 0x05	; 5
 11e:	2e 7f       	andi	r18, 0xFE	; 254
 120:	25 b9       	out	0x05, r18	; 5
 122:	d2 cf       	rjmp	.-92     	; 0xc8 <main+0x2a>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
