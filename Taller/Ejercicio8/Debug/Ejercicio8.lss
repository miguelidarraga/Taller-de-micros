
Ejercicio8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000190  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000849  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000797  00000000  00000000  00000a39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026f  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e4  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	36 c0       	rjmp	.+108    	; 0x108 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void) {
	// Configuración de puertos
	DDRD = 0x00;    // PD0..PD3 como entradas (niveles)
  9e:	1a b8       	out	0x0a, r1	; 10
	DDRC &= ~(1<<PC0); // PC0 como entrada (manual)
  a0:	87 b1       	in	r24, 0x07	; 7
  a2:	8e 7f       	andi	r24, 0xFE	; 254
  a4:	87 b9       	out	0x07, r24	; 7
	DDRA = 0xFF;    // PA0..PA2 salidas (bomba y alarmas)
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	81 b9       	out	0x01, r24	; 1
	DDRB = 0xFF;    // Barra de LEDs como salida
  aa:	84 b9       	out	0x04, r24	; 4
	
	while(1) {
		int niveles = PIND & 0x0F;   // Leer PD0..PD3
  ac:	89 b1       	in	r24, 0x09	; 9
  ae:	8f 70       	andi	r24, 0x0F	; 15
  b0:	28 2f       	mov	r18, r24
  b2:	30 e0       	ldi	r19, 0x00	; 0
		int modo_manual = (PINC & (1<<PC0));
  b4:	96 b1       	in	r25, 0x06	; 6
  b6:	49 2f       	mov	r20, r25
  b8:	41 70       	andi	r20, 0x01	; 1
  ba:	50 e0       	ldi	r21, 0x00	; 0
		
		// Mostrar niveles en LEDs
		PORTB = niveles;
  bc:	85 b9       	out	0x05, r24	; 5
		
		// Alarmas
		if(niveles == 0x00) {
  be:	21 15       	cp	r18, r1
  c0:	31 05       	cpc	r19, r1
  c2:	21 f4       	brne	.+8      	; 0xcc <main+0x2e>
			PORTA |= (1<<PA1); // Alarma bajo
  c4:	82 b1       	in	r24, 0x02	; 2
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	82 b9       	out	0x02, r24	; 2
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <main+0x34>
			} else {
			PORTA &= ~(1<<PA1);
  cc:	82 b1       	in	r24, 0x02	; 2
  ce:	8d 7f       	andi	r24, 0xFD	; 253
  d0:	82 b9       	out	0x02, r24	; 2
		}
		
		if(niveles == 0x08) { // PD3=1 ? 100%
  d2:	28 30       	cpi	r18, 0x08	; 8
  d4:	31 05       	cpc	r19, r1
  d6:	21 f4       	brne	.+8      	; 0xe0 <main+0x42>
			PORTA |= (1<<PA2); // Alarma alto
  d8:	82 b1       	in	r24, 0x02	; 2
  da:	84 60       	ori	r24, 0x04	; 4
  dc:	82 b9       	out	0x02, r24	; 2
  de:	03 c0       	rjmp	.+6      	; 0xe6 <main+0x48>
			} else {
			PORTA &= ~(1<<PA2);
  e0:	82 b1       	in	r24, 0x02	; 2
  e2:	8b 7f       	andi	r24, 0xFB	; 251
  e4:	82 b9       	out	0x02, r24	; 2
		}
		
		// Control de bomba
		if(modo_manual) {
  e6:	45 2b       	or	r20, r21
  e8:	21 f0       	breq	.+8      	; 0xf2 <main+0x54>
			PORTA |= (1<<PA0); // Bomba encendida manual
  ea:	82 b1       	in	r24, 0x02	; 2
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	82 b9       	out	0x02, r24	; 2
  f0:	dd cf       	rjmp	.-70     	; 0xac <main+0xe>
			} else {
			if(niveles < 0x02) {   // Nivel < 2 (0000 o 0001)
  f2:	22 30       	cpi	r18, 0x02	; 2
  f4:	31 05       	cpc	r19, r1
  f6:	24 f4       	brge	.+8      	; 0x100 <main+0x62>
				PORTA |= (1<<PA0);
  f8:	82 b1       	in	r24, 0x02	; 2
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	82 b9       	out	0x02, r24	; 2
  fe:	d6 cf       	rjmp	.-84     	; 0xac <main+0xe>
				} else {
				PORTA &= ~(1<<PA0);
 100:	82 b1       	in	r24, 0x02	; 2
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	82 b9       	out	0x02, r24	; 2
 106:	d2 cf       	rjmp	.-92     	; 0xac <main+0xe>

00000108 <_exit>:
 108:	f8 94       	cli

0000010a <__stop_program>:
 10a:	ff cf       	rjmp	.-2      	; 0x10a <__stop_program>
